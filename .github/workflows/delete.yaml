name: Delete Application Resources

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to delete (e.g., dev, prod)'
        required: false  # optional for auto-detection
  delete:
    branches:
      - '**'

permissions:
  id-token: write
  contents: read

jobs:
  delete:
    runs-on: ubuntu-latest

    env:
      APPLICATION_NAME: imageworkflow

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Determine environment
        id: set-env
        run: |
          if [[ -n "${{ github.event.inputs.environment }}" ]]; then
            RAW_ENV="${{ github.event.inputs.environment }}"
          else
            RAW_ENV="${GITHUB_REF##*/}"
          fi

          if [[ "$RAW_ENV" == "dev" ]]; then
            ENVIRONMENT="dev"
          elif [[ "$RAW_ENV" == "master" ]]; then
            ENVIRONMENT="prod"
          else
            CLEANED=$(echo "$RAW_ENV" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9' | cut -c1-16)
            ENVIRONMENT="$CLEANED"
          fi

          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "Mapped '$RAW_ENV' to environment '$ENVIRONMENT'"

      - name: Delete orchestrator stack
        run: |
          set +e
          STACK_NAME="${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-orchestration-stack"
          echo "Deleting stack $STACK_NAME..."
          aws cloudformation delete-stack --stack-name "$STACK_NAME"
          aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME" || echo "Failed or already deleted"
          set -e

      - name: Delete compute stack
        run: |
          set +e
          STACK_NAME="${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-compute-stack"
          echo "Deleting stack $STACK_NAME..."
          aws cloudformation delete-stack --stack-name "$STACK_NAME"
          aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME" || echo "Failed or already deleted"
          set -e

      - name: Empty and delete upload and resize S3 buckets
        run: |
            set +e
            for BUCKET_SUFFIX in upload resize; do
            BUCKET="${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-${BUCKET_SUFFIX}-bucket-${{ secrets.AWS_ACCOUNT_ID }}"
            echo "Emptying bucket: $BUCKET"
            aws s3 rm s3://$BUCKET --recursive || echo "Bucket $BUCKET not found or already empty"
            echo "Deleting bucket: $BUCKET"
            aws s3api delete-bucket --bucket $BUCKET || echo "Bucket $BUCKET could not be deleted (may not exist or not empty)"
            done
            set -e

      - name: Delete data stack
        run: |
          set +e
          STACK_NAME="${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-data-stack"
          echo "Deleting stack $STACK_NAME..."
          aws cloudformation delete-stack --stack-name "$STACK_NAME"
          aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME" || echo "Failed or already deleted"
          set -e

      - name: Delete Lambda zips from assets bucket including versions
        run: |
            set +e
            BUCKET="${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-assets-${{ secrets.AWS_ACCOUNT_ID }}"
            echo "Emptying Lambda artifacts bucket including versions: $BUCKET"

            # Delete all object versions and delete markers
            aws s3api list-object-versions --bucket $BUCKET --output json | \
            jq -r '.Versions[] | "\(.Key) \(.VersionId)"' | \
            while read key versionId; do
            echo "Deleting version $versionId of object $key"
            aws s3api delete-object --bucket $BUCKET --key "$key" --version-id "$versionId"
            done

            aws s3api list-object-versions --bucket $BUCKET --output json | \
            jq -r '.DeleteMarkers[] | "\(.Key) \(.VersionId)"' | \
            while read key versionId; do
            echo "Deleting delete marker version $versionId of object $key"
            aws s3api delete-object --bucket $BUCKET --key "$key" --version-id "$versionId"
            done

            # Delete any remaining current versions (just in case)
            aws s3 rm s3://$BUCKET --recursive || echo "Bucket $BUCKET not found or already empty"

            echo "Deleting bucket: $BUCKET"
            aws s3api delete-bucket --bucket $BUCKET || echo "Bucket $BUCKET could not be deleted (may not exist or not empty)"

            set -e


      - name: Delete bootstrap stack
        run: |
          set +e
          STACK_NAME="${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-bootstrap-stack"
          echo "Deleting stack $STACK_NAME..."
          aws cloudformation delete-stack --stack-name "$STACK_NAME"
          aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME" || echo "Failed or already deleted"
          set -e