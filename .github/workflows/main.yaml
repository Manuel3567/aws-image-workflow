name: Deploy Application

on:
  push:
    branches:
      - '**'
  create:
    branches:
      - '**'

permissions:
  id-token: write  # Required for OIDC
  contents: read   # To checkout the repo

jobs:
  deploy:
    runs-on: ubuntu-latest

    #environment: production  # optional GitHub environment


    env:
      APPLICATION_NAME: imageworkflow

    steps:
      - name: Set environment based on branch
        id: set-env
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"

          if [[ "$BRANCH_NAME" == "dev" ]]; then
            ENVIRONMENT="dev"
          elif [[ "$BRANCH_NAME" == "master" ]]; then
            ENVIRONMENT="prod"
          else
            # Convert to lowercase, remove non-alphanumeric chars, and truncate to 16 chars
            CLEANED=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | tr -cd 'a-z0-9' | cut -c1-16)
            ENVIRONMENT="$CLEANED"
          fi

          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "Mapped branch '$BRANCH_NAME' to environment '$ENVIRONMENT'"

    
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ vars.AWS_REGION }}


      - name: Deploy Bootstrap
        run: |
          aws cloudformation deploy \
            --template-file infra/01_bootstrap.yaml \
            --stack-name ${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-bootstrap-stack \
            --parameter-overrides \
              ApplicationName=${{ env.APPLICATION_NAME }} \
              Environment=${{ env.ENVIRONMENT }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --tags Project=${{ env.APPLICATION_NAME }} Environment=${{ env.ENVIRONMENT }}

      - name: Deploy Data
        run: |
          aws cloudformation deploy \
            --template-file infra/02_data.yaml \
            --stack-name ${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-data-stack \
            --parameter-overrides \
              ApplicationName=${{ env.APPLICATION_NAME }} \
              Environment=${{ env.ENVIRONMENT }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --tags Project=${{ env.APPLICATION_NAME }} Environment=${{ env.ENVIRONMENT }}     

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "app/image_resizer/.python-version"

      - name: Build and package image_resizer
        run: |
          cd app/image_resizer

          uv build
          uv pip install --target build ./dist/image_resizer-0.1.0-py3-none-any.whl

          cd build
          zip -r ../image_resizer_code.zip *
          cd ..

          # Generate a unique key using timestamp or short commit hash
          VERSION_ID=$(date +%Y%m%d%H%M%S)-${GITHUB_SHA::8}
          S3_KEY="lambdas/image_resizer_code-${VERSION_ID}.zip"

          echo "IMAGE_RESIZE_LAMBDA_CODE_KEY=$S3_KEY" >> $GITHUB_ENV

          aws s3 cp image_resizer_code.zip \
            s3://${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-assets-${{ secrets.AWS_ACCOUNT_ID }}/$S3_KEY
      

      - name: Check and delete compute stack if in ROLLBACK_COMPLETE
        run: |
          STACK_NAME="${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-compute-stack"
          STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "STACK_DOES_NOT_EXIST")

          if [[ "$STATUS" == "ROLLBACK_COMPLETE" ]]; then
            echo "Stack $STACK_NAME is in ROLLBACK_COMPLETE state. Deleting..."
            aws cloudformation delete-stack --stack-name "$STACK_NAME"
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME"
          else
            echo "Stack status is $STATUS. No deletion needed."
          fi

      - name: Deploy Compute
        run: |
          aws cloudformation deploy \
            --template-file infra/03_compute.yaml \
            --stack-name ${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-compute-stack \
            --parameter-overrides \
              ApplicationName=${{ env.APPLICATION_NAME }} \
              Environment=${{ env.ENVIRONMENT }} \
              LambdaCodeKey=${{ env.IMAGE_RESIZE_LAMBDA_CODE_KEY }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --tags Project=${{ env.APPLICATION_NAME }} Environment=${{ env.ENVIRONMENT }}

      - name: Check and delete orchestration stack if in ROLLBACK_COMPLETE
        run: |
          STACK_NAME="${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-orchestration-stack"
          STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "STACK_DOES_NOT_EXIST")

          if [[ "$STATUS" == "ROLLBACK_COMPLETE" ]]; then
            echo "Stack $STACK_NAME is in ROLLBACK_COMPLETE state. Deleting..."
            aws cloudformation delete-stack --stack-name "$STACK_NAME"
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME"
          else
            echo "Stack status is $STATUS. No deletion needed."
          fi

      - name: Deploy orchestrator
        run: |
          aws cloudformation deploy \
            --template-file infra/04_orchestrator.yaml \
            --stack-name ${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-orchestration-stack \
            --parameter-overrides \
              ApplicationName=${{ env.APPLICATION_NAME }} \
              Environment=${{ env.ENVIRONMENT }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --tags Project=${{ env.APPLICATION_NAME }} Environment=${{ env.ENVIRONMENT }}

      - name: Prune old Lambda zips
        run: |
          BUCKET="${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-assets-${{ secrets.AWS_ACCOUNT_ID }}"
          
          # List zip files sorted by last modified, skip the most recent N
          aws s3api list-objects-v2 --bucket "$BUCKET" --prefix "lambdas/image_resizer_code" \
            --query "sort_by(Contents, &LastModified)[0:-5].Key" --output text |
          tr '\t' '\n' |
          while read key; do
            echo "Deleting $key"
            aws s3 rm "s3://$BUCKET/$key"
          done
          