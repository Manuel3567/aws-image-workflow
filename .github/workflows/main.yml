name: Deploy Application

on:
  push:
    branches:
      - master  # or your deployment branch

permissions:
  id-token: write  # Required for OIDC
  contents: read   # To checkout the repo

jobs:
  deploy:
    runs-on: ubuntu-latest

    #environment: production  # optional GitHub environment


    env:
      APPLICATION_NAME: imageworkflow

    steps:
      - name: Set environment based on branch
        id: set-env
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"

          if [[ "$BRANCH_NAME" == "dev" ]]; then
            ENVIRONMENT="dev"
          elif [[ "$BRANCH_NAME" == "master" ]]; then
            ENVIRONMENT="prod"
          else
            ENVIRONMENT="$BRANCH_NAME"
          fi

          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "Mapped branch '$BRANCH_NAME' to environment '$ENVIRONMENT'"
    
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ vars.AWS_REGION }}


      - name: Deploy Bootstrap
        run: |
          aws cloudformation deploy \
            --template-file infra/01_bootstrap.yaml \
            --stack-name ${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-bootstrap-stack \
            --parameter-overrides \
              ApplicationName=${{ env.APPLICATION_NAME }} \
              Environment=${{ env.ENVIRONMENT }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --tags Project=${{ env.APPLICATION_NAME }} Environment=${{ env.ENVIRONMENT }}

      - name: Deploy Data
        run: |
          aws cloudformation deploy \
            --template-file infra/02_data.yaml \
            --stack-name ${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-data-stack \
            --parameter-overrides \
              ApplicationName=${{ env.APPLICATION_NAME }} \
              Environment=${{ env.ENVIRONMENT }} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --tags Project=${{ env.APPLICATION_NAME }} Environment=${{ env.ENVIRONMENT }}     

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: "Set up Python"
        uses: actions/setup-python@v6
        with:
          python-version-file: "app/image_resizer/.python-version"

      - name: Build and package image_resizer
        run: |
          cd app/image_resizer

          # Build the wheel
          uv build

          # Install the wheel to the 'build' directory
          uv pip install --target build ./dist/image_resizer-0.1.0-py3-none-any.whl

          # Zip the contents of the build directory
          cd build
          zip -r ../image_resizer_code.zip *
        
          aws s3 cp image_resizer_code.zip \
            s3://${{ env.APPLICATION_NAME }}-${{ env.ENVIRONMENT }}-assets-${{ secrets.AWS_ACCOUNT_ID }}/lambdas/image_resizer_code.zip      
